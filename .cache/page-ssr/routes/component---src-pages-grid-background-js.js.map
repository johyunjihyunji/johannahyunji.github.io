{"version":3,"file":"component---src-pages-grid-background-js.js","mappings":";;;;;;;;;;;;;;;AAGA,KAAMK,cAAa,CAAGD,mEAAM,CAACE,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAMC,SAAQ,CAAGH,mEAAM,CAACE,GAAI;AAC5B,sCAAsCE,KAAK,EAAIA,KAAK,CAACC,OAAQ;AAC7D;AACA,CAAC,CAED,KAAMC,eAAc,CAAG,IAAM,CAC3B,KAAM,GAACC,aAAa,GAAEC,gBAAgB,EAAIX,+CAAQ,CAAC,CAAEY,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CAAC,CAClE,KAAMC,QAAO,CAAGZ,6CAAM,CAAC,IAAI,CAAC,CAG5B,GAAI,MAAOa,OAAM,GAAK,WAAW,CAAE,CACjC,MAAO,KAAI,CAAE;AACf,CAGAd,gDAAS,CAAC,IAAM,CACd,KAAMe,gBAAe,CAAIC,KAAK,EAAK,CACjCN,gBAAgB,CAAC,CAAEC,CAAC,CAAEK,KAAK,CAACC,OAAO,CAAEL,CAAC,CAAEI,KAAK,CAACE,OAAQ,CAAC,CAAC,CAC1D,CAAC,CAEDJ,MAAM,CAACK,gBAAgB,CAAC,WAAW,CAAEJ,eAAe,CAAC,CAErD,MAAO,IAAM,CACXD,MAAM,CAACM,mBAAmB,CAAC,WAAW,CAAEL,eAAe,CAAC,CAC1D,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAENf,gDAAS,CAAC,IAAM,CACd,KAAMqB,WAAU,CAAG,IAAM,CACvB,GAAI,CAACR,OAAO,CAACS,OAAO,CAAE,OAEtB,KAAMC,MAAK,CAAGV,OAAO,CAACS,OAAO,CAACE,UAAU,CACxCD,KAAK,CAACE,OAAO,CAAEC,IAAI,EAAK,CACtB,KAAMC,KAAI,CAAGD,IAAI,CAACE,qBAAqB,EAAE,CACzC,KAAMC,QAAO,CAAGF,IAAI,CAACG,IAAI,CAAGH,IAAI,CAACI,KAAK,CAAG,CAAC,CAC1C,KAAMC,QAAO,CAAGL,IAAI,CAACM,GAAG,CAAGN,IAAI,CAACO,MAAM,CAAG,CAAC,CAE1C,KAAMC,SAAQ,CAAGC,IAAI,CAACC,IAAI,CACxBD,IAAI,CAACE,GAAG,CAAC7B,aAAa,CAACE,CAAC,CAAGkB,OAAO,CAAE,CAAC,CAAC,CAAGO,IAAI,CAACE,GAAG,CAAC7B,aAAa,CAACG,CAAC,CAAGoB,OAAO,CAAE,CAAC,CAAC,CAChF,CAED,KAAMO,YAAW,CAAG,GAAG,CAAE;AACzB,KAAMhC,QAAO,CAAG6B,IAAI,CAACI,GAAG,CAAC,CAAC,CAAE,CAAC,CAAGL,QAAQ,CAAGI,WAAW,CAAC,CACvDb,IAAI,CAACe,KAAK,CAACC,eAAe,CAAI,mBAAkBnC,OAAO,CAAG,GAAI,GAAE,CAClE,CAAC,CAAC,CACJ,CAAC,CAEDc,UAAU,EAAE,CACd,CAAC,CAAE,CAACZ,aAAa,CAAC,CAAC,CAEnB,KAAMkC,WAAU,CAAG,IAAM,CACvB,KAAMC,WAAU,CAAGR,IAAI,CAACS,IAAI,CAAE/B,MAAM,CAACgC,UAAU,CAAG,EAAE,EAAKhC,MAAM,CAACiC,WAAW,CAAG,EAAE,CAAC,CAAC,CAClF,MAAOC,MAAK,CAACJ,UAAU,CAAC,CAACK,IAAI,EAAE,CAACC,GAAG,CAAC,CAACC,CAAC,CAAEC,KAAK,gBAC3C,2DAAC,QAAQ,EAAC,GAAG,CAAEA,KAAM,EACtB,CAAC,CACJ,CAAC,CAED,mBACE,2DAAC,aAAa,EAAC,GAAG,CAAEvC,OAAQ,EACzB8B,UAAU,EAAE,CACC,CAEpB,CAAC,CAED,iEAAenC,cAAc","sources":["webpack://gatsby-starter-hello-world/./src/pages/GridBackground.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst GridContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n  grid-auto-rows: minmax(50px, 1fr);\n  pointer-events: none;\n`;\n\nconst GridCell = styled.div`\n  background-color: rgba(0, 0, 255, ${props => props.opacity});\n  transition: background-color 0.1s ease;\n`;\n\nconst GridBackground = () => {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const gridRef = useRef(null);\n\n\n  if (typeof window === 'undefined') {\n    return null; // Render nothing or a loading state on the server\n  }\n  \n\n  useEffect(() => {\n    const handleMouseMove = (event) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateGrid = () => {\n      if (!gridRef.current) return;\n\n      const cells = gridRef.current.childNodes;\n      cells.forEach((cell) => {\n        const rect = cell.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n\n        const distance = Math.sqrt(\n          Math.pow(mousePosition.x - centerX, 2) + Math.pow(mousePosition.y - centerY, 2)\n        );\n\n        const maxDistance = 200; // Adjust this value to change the size of the \"spotlight\"\n        const opacity = Math.max(0, 1 - distance / maxDistance);\n        cell.style.backgroundColor = `rgba(0, 0, 255, ${opacity * 0.5})`;\n      });\n    };\n\n    updateGrid();\n  }, [mousePosition]);\n\n  const createGrid = () => {\n    const cellsCount = Math.ceil((window.innerWidth / 50) * (window.innerHeight / 50));\n    return Array(cellsCount).fill().map((_, index) => (\n      <GridCell key={index} />\n    ));\n  };\n\n  return (\n    <GridContainer ref={gridRef}>\n      {createGrid()}\n    </GridContainer>\n  );\n};\n\nexport default GridBackground;"],"names":["React","useState","useEffect","useRef","styled","GridContainer","div","GridCell","props","opacity","GridBackground","mousePosition","setMousePosition","x","y","gridRef","window","handleMouseMove","event","clientX","clientY","addEventListener","removeEventListener","updateGrid","current","cells","childNodes","forEach","cell","rect","getBoundingClientRect","centerX","left","width","centerY","top","height","distance","Math","sqrt","pow","maxDistance","max","style","backgroundColor","createGrid","cellsCount","ceil","innerWidth","innerHeight","Array","fill","map","_","index"],"sourceRoot":""}