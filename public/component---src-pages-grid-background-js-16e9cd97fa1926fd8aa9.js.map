{"version":3,"file":"component---src-pages-grid-background-js-16e9cd97fa1926fd8aa9.js","mappings":"0LAGA,MAAMA,EAAgBC,EAAAA,GAAOC,IAAG,uPAY1BC,EAAWF,EAAAA,GAAOC,IAAG,8GACWE,GAASA,EAAMC,UA8DrD,UA1DuB,KACrB,MAAM,EAACC,EAAc,EAACC,IAAoBC,EAAAA,EAAAA,UAAS,CAAEC,EAAG,EAAGC,EAAG,IACxDC,GAAUC,EAAAA,EAAAA,QAAO,OAGvBC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAmBC,IACvBR,EAAiB,CAAEE,EAAGM,EAAMC,QAASN,EAAGK,EAAME,SAAU,EAG1D,MAAsB,oBAAXC,OACA,MAGXA,OAAOC,iBAAiB,YAAaL,GAE9B,KACLI,OAAOE,oBAAoB,YAAaN,EAAgB,EACzD,GACA,KAEHD,EAAAA,EAAAA,YAAU,KACW,MACjB,IAAKF,EAAQU,QAAS,OAERV,EAAQU,QAAQC,WACxBC,SAASC,IACb,MAAMC,EAAOD,EAAKE,wBACZC,EAAUF,EAAKG,KAAOH,EAAKI,MAAQ,EACnCC,EAAUL,EAAKM,IAAMN,EAAKO,OAAS,EAEnCC,EAAWC,KAAKC,KACpBD,KAAKE,IAAI9B,EAAcG,EAAIkB,EAAS,GAAKO,KAAKE,IAAI9B,EAAcI,EAAIoB,EAAS,IAIzEzB,EAAU6B,KAAKG,IAAI,EAAG,EAAIJ,EADZ,KAEpBT,EAAKc,MAAMC,gBAAe,mBAAgC,GAAVlC,EAAa,GAAG,GAChE,EAGJmC,EAAY,GACX,CAAClC,IASJ,OACE,gBAACN,EAAa,CAACyC,IAAK9B,GARH,MACjB,MAAM+B,EAAaR,KAAKS,KAAMzB,OAAO0B,WAAa,IAAO1B,OAAO2B,YAAc,KAC9E,OAAOC,MAAMJ,GAAYK,OAAOC,KAAI,CAACC,EAAGC,IACtC,gBAAC/C,EAAQ,CAACgD,IAAKD,KACf,EAKCE,GACa,C","sources":["webpack://gatsby-starter-hello-world/./src/pages/GridBackground.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst GridContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n  grid-auto-rows: minmax(50px, 1fr);\n  pointer-events: none;\n`;\n\nconst GridCell = styled.div`\n  background-color: rgba(0, 0, 255, ${props => props.opacity});\n  transition: background-color 0.1s ease;\n`;\n\nconst GridBackground = () => {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const gridRef = useRef(null);\n  \n\n  useEffect(() => {\n    const handleMouseMove = (event) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    };\n\n    if (typeof window === 'undefined') {\n        return null; // Render nothing or a loading state on the server\n      }\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateGrid = () => {\n      if (!gridRef.current) return;\n\n      const cells = gridRef.current.childNodes;\n      cells.forEach((cell) => {\n        const rect = cell.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n\n        const distance = Math.sqrt(\n          Math.pow(mousePosition.x - centerX, 2) + Math.pow(mousePosition.y - centerY, 2)\n        );\n\n        const maxDistance = 200; // Adjust this value to change the size of the \"spotlight\"\n        const opacity = Math.max(0, 1 - distance / maxDistance);\n        cell.style.backgroundColor = `rgba(0, 0, 255, ${opacity * 0.5})`;\n      });\n    };\n\n    updateGrid();\n  }, [mousePosition]);\n\n  const createGrid = () => {\n    const cellsCount = Math.ceil((window.innerWidth / 50) * (window.innerHeight / 50));\n    return Array(cellsCount).fill().map((_, index) => (\n      <GridCell key={index} />\n    ));\n  };\n\n  return (\n    <GridContainer ref={gridRef}>\n      {createGrid()}\n    </GridContainer>\n  );\n};\n\nexport default GridBackground;"],"names":["GridContainer","styled","div","GridCell","props","opacity","mousePosition","setMousePosition","useState","x","y","gridRef","useRef","useEffect","handleMouseMove","event","clientX","clientY","window","addEventListener","removeEventListener","current","childNodes","forEach","cell","rect","getBoundingClientRect","centerX","left","width","centerY","top","height","distance","Math","sqrt","pow","max","style","backgroundColor","updateGrid","ref","cellsCount","ceil","innerWidth","innerHeight","Array","fill","map","_","index","key","createGrid"],"sourceRoot":""}